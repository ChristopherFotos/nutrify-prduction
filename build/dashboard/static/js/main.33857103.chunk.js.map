{"version":3,"sources":["recipeCard.js","cardContainer.js","App.js","serviceWorker.js","index.js"],"names":["RecipeCard","props","console","log","recipe","useState","setRecipe","a","fetch","method","mode","headers","credentials","body","JSON","stringify","id","json","recipeJSON","useEffect","getData","addEvents","length","className","src","img","alt","label","href","url","target","style","display","ingredientLines","map","ingredientLine","digest","i","Math","floor","total","unit","CardContainer","targets","document","querySelectorAll","forEach","elem","hasEventListener","addEventListener","e","expanded","innerText","Array","from","parentElement","children","li","classList","remove","add","recipes","App","setRecipes","localStorage","token","res","JSONresponse","message","window","location","replace","requestedRecipes","recipesJSON","fetchData","logout","status","Fragment","onClick","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.33857103.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\n\r\n// * This component holds the card. right now a bunch of stuff has been taken out for testing purposes, but when all of the \r\n//components of the recipe are integrated into the Recipe model,\r\n// this component can be changed back to exactly how it is in nutrify main. Literally just copy and paste the code over. \r\n\r\n\r\nconst RecipeCard = (props) => {\r\n\r\n  console.log(\"PROPS.RECIPE:  \", props.recipe)\r\n  const [recipe, setRecipe] = useState([])\r\n\r\n  async function getData() {\r\n    let recipe = await fetch('/user/getrecipe', {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify({\r\n        id: props.recipe, // this will have to change when we move this function to the App component\r\n      })\r\n    }\r\n    )\r\n\r\n    let recipeJSON = await recipe.json()\r\n    setRecipe(recipeJSON)\r\n  }\r\n\r\n\r\n  useEffect(() => { getData() }, [])\r\n  useEffect(() => {\r\n    props.addEvents();\r\n  })\r\n\r\n  console.log('RECIPE CARD RECIPE VALUE: ', recipe)\r\n\r\n\r\n  if (recipe.length < 1) {\r\n    return null\r\n  } else {\r\n    return (\r\n      <div className=\"grid-card\">\r\n        <img\r\n          src={recipe.recipe[0].img}\r\n          className=\"card-img\"\r\n          alt=\"the finished product\"\r\n        />\r\n        <span className=\"recipe-title\">{recipe.recipe[0].label}</span>\r\n        <div className=\"card-content\">\r\n          <span className=\"show-details show-details-open ingredient-card-tag\">\r\n            Show\r\n    </span>\r\n\r\n          <div className=\"card-content-closed\">\r\n            <a href={recipe.recipe[0].url} target=\"_blank\" className='full-instructions-link' style={{ display: \"none\" }}>See full instructions</a>\r\n            <ul style={{ display: \"none\" }}>\r\n              {recipe.recipe[0].ingredientLines.map((ingredientLine) => {\r\n                return <li>{ingredientLine}</li>;\r\n              })}\r\n            </ul>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"card-content\">\r\n          <span className=\"show-details show-details-open nutrition-card-tag\">\r\n            Show\r\n    </span>\r\n\r\n          <div className=\"card-content-closed\">\r\n            {\r\n              // Nutrition info goes here \r\n              recipe.recipe[0].digest.map((i) => {\r\n                return (\r\n                  <li><b>{i.label}:</b> {Math.floor(i.total)} {i.unit}</li>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n\r\n          <div className=\"recipe-summary-div\">\r\n            6 ingredients | Low carb | Low fat | Martha Stewart\r\n    </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default RecipeCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport RecipeCard from \"./recipeCard\";\r\n\r\n// This component renders a container for the recipe cards that are returned when the user enters a search term. It accepts an array\r\n// of recipe objects as its props, and it uses that array to render recipe card components. When this component rerenders, the useEffect\r\n// hook adds event listeners to the cards so that they can be opened and closed on click.\r\n\r\nconst CardContainer = (props) => {\r\n  const [fullRecipes, setfullRecipes] = useState([])\r\n\r\n  useEffect(() => {\r\n    console.log('PROPS IN CARDCONTAINER', props)\r\n  })\r\n\r\n  function addEvents() {\r\n\r\n    let targets = document.querySelectorAll(\".show-details\");\r\n    console.log(\"TARGETS EL: \", targets)\r\n\r\n    targets.forEach((elem) => {\r\n      console.log('adding event listeners')\r\n      if (elem.hasEventListener) {\r\n        return\r\n      }\r\n      else {\r\n        elem.hasEventListener = true;\r\n        elem.addEventListener(\"click\", (e) => {\r\n          console.log(\"OPEN EVENT FIRING\")\r\n          if (!e.target.expanded) {\r\n            //Checks if the div is collpased and opens it\r\n            e.target.expanded = true;\r\n            e.target.innerText = \"Hide\";\r\n            Array.from(e.target.parentElement.children[1].children).forEach(\r\n              (li) => {\r\n                li.style.display = \"block\";\r\n              }\r\n            );\r\n            e.target.parentElement.children[1].classList.remove(\r\n              \"card-content-closed\"\r\n            );\r\n            e.target.parentElement.children[1].classList.add(\"card-content-open\");\r\n            e.target.parentElement.classList.remove(\"card-closed\");\r\n            e.target.parentElement.classList.add(\"card-open\");\r\n          } else if (e.target.expanded) {\r\n            console.log(\"CLOSE EVENT FIRING\")\r\n            //Checks if the div is open and collapses it\r\n            e.target.expanded = false;\r\n            e.target.innerText = \"Show\";\r\n            Array.from(e.target.parentElement.children[1].children).forEach(\r\n              (li) => {\r\n                li.style.display = \"none\";\r\n              }\r\n            );\r\n            e.target.parentElement.children[1].classList.remove(\r\n              \"card-content-open\"\r\n            );\r\n            e.target.parentElement.children[1].classList.add(\r\n              \"card-content-closed\"\r\n            );\r\n            e.target.parentElement.children[1].classList.remove(\"card-open\");\r\n            e.target.parentElement.classList.remove(\"card-open\");\r\n            e.target.parentElement.classList.add(\"card-closed\");\r\n          }\r\n        })\r\n      };\r\n    });\r\n  }\r\n\r\n\r\n  if (props.recipes.length > 0) {\r\n    return (\r\n      <div className=\"card-container\">\r\n        <h3 className=\"dashboard-heading\">Saved recipes</h3>\r\n        {props.recipes.map((recipe) => {\r\n          return <RecipeCard recipe={recipe} addEvents={addEvents}></RecipeCard>;\r\n        })}\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"card-container\">\r\n        <h4 className=\"dashboard-heading\">Hungry? Save recipes and find them here later! </h4>\r\n        <p id=\"how-to-p\">Go to the home page and search for a recipe by name or ingredients. Click 'Save' when you find one you like, then you can come back here and find it later. </p>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { Component, useState, useEffect } from \"react\";\r\nimport \"./materialize.css\";\r\nimport CardContainer from \"./cardContainer\";\r\n\r\n\r\nconst App = () => {\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [fullRecipes, setfullRecipes] = useState([]);\r\n\r\n  let recipesToRender = \"INITIAL VALUE\";\r\n  console.log(\"initial value: \", recipesToRender)\r\n\r\n  // The following useEffect hook sends a fetch request to the \r\n  //'verify' route with localStorage.token as the authorization header.\r\n  // if the user is not logged in then localStorage.token will have \r\n  // no value, and verification will fail. In this event, the user \r\n  // is redirected to the login page.\r\n\r\n  useEffect((() => {\r\n    async function fetchData() {\r\n      const res = await fetch('/user/verify', {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + localStorage.token\r\n        },\r\n        credentials: 'include'\r\n      }\r\n      )\r\n\r\n      const JSONresponse = await res.json()\r\n      console.log(\"JSONresponse :\", JSONresponse)\r\n\r\n      if (JSONresponse.message === \"Authentication failed\") {\r\n        console.log(JSONresponse)\r\n        console.log(\"Auth failed\")\r\n        window.location.replace('/')\r\n      } else {\r\n        const requestedRecipes = await fetch('/user/recipes', {\r\n          method: 'POST',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          credentials: 'include'\r\n        }\r\n        )\r\n\r\n        let recipesJSON = await requestedRecipes.json();\r\n        setRecipes(recipesJSON.recipes)\r\n        console.log(\"recipes state: \", recipes)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }\r\n  ), [])\r\n\r\n  const logout = async () => {\r\n    let res = await fetch('/user/logout',\r\n      {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include'\r\n      }\r\n    )\r\n    console.log(res)\r\n    if (res.status === 200) {\r\n      window.location.replace('/')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"app-container\">\r\n        <div className=\"navbar\">\r\n          <div className=\"navbar-button-container\" id='guest-navbar'>\r\n            <a href=\"/\" className=\"navbar-button\" id=\"dashboard-button\">home</a>\r\n            <span className=\"navbar-button\" id=\"login-button\" onClick={logout}>logout</span>\r\n          </div>\r\n        </div>\r\n        <CardContainer recipes={recipes}></CardContainer>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./materialize.css\";\nimport \"./styles.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}